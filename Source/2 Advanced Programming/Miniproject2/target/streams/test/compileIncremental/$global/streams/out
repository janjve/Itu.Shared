[0m[[0mdebug[0m] [0m[naha] The adpro.monads.ExceptionEvaluatorWithMonads$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.ExceptionEvaluatorWithMonads$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.ExceptionEvaluatorWithMonads$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.Cons$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.Cons$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.Cons$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.Term source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.Term: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.Term.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.Div$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.Div$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.Div$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.ExceptionEvaluator$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.ExceptionEvaluator$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.ExceptionEvaluator$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.BasicEvaluatorWithMonads$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.BasicEvaluatorWithMonads$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.BasicEvaluatorWithMonads$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.Cons source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.Cons: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.Cons.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.BasicEvaluator$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.BasicEvaluator$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.BasicEvaluator$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.StateEvaluator$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.StateEvaluator$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.StateEvaluator$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.OutputEvaluator$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.OutputEvaluator$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.OutputEvaluator$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] The adpro.monads.Div source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) adpro.monads.Div: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) adpro.monads.Div.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala: Set(step, map, asInstanceOf, M, isInstanceOf, eval, <init>, apply, flatMap, ==, !=)[0m
[0m[[0mdebug[0m] [0m[naha] [0m
[0m[[0mdebug[0m] [0m[naha] Initial source changes: [0m
[0m[[0mdebug[0m] [0m[naha] 	removed:Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	added: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	modified: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Invalidated products: Set()[0m
[0m[[0mdebug[0m] [0m[naha] External API changes: API Changes: Set(NamesChange(adpro.monads.ExceptionEvaluatorWithMonads$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.Cons$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.Term,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.Div$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.ExceptionEvaluator$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.BasicEvaluatorWithMonads$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.Cons,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.BasicEvaluator$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.StateEvaluator$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.OutputEvaluator$,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )), NamesChange(adpro.monads.Div,ModifiedNames(regularNames = notify, unapply, StateEvaluatorWithMonads, wait, step, $asInstanceOf, map, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, M, canEqual, productPrefix, notifyAll, isInstanceOf, eval, <init>, apply, flatMap, ==, clone, $init$, copy, toString, !=, unit, getClass, copy$default$1, State, ne, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )))[0m
[0m[[0mdebug[0m] [0m[naha] Modified binary dependencies: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Initial directly invalidated sources: Set()[0m
[0m[[0mdebug[0m] [0m[naha] [0m
[0m[[0mdebug[0m] [0m[naha] Sources indirectly invalidated by:[0m
[0m[[0mdebug[0m] [0m[naha] 	product: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	binary dep: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	external source: Set(C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala)[0m
[0m[[0mdebug[0m] [0mAll initially invalidated sources: Set(C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\src\test\scala\adpro\monads\TermSpec.scala)[0m
[0m[[0mdebug[0m] [0m[naha] Recompiling all 1 sources: invalidated sources (1) exceeded 50.0% of all sources[0m
[0m[[0minfo[0m] [0mCompiling 1 Scala source to C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\target\scala-2.11\test-classes...[0m
[0m[[0mdebug[0m] [0mGetting org.scala-sbt:compiler-interface:0.13.11:component from component compiler for Scala 2.11.7[0m
[0m[[0mdebug[0m] [0mGetting org.scala-sbt:compiler-interface:0.13.11:component from component compiler for Scala 2.11.7[0m
[0m[[0mdebug[0m] [0mRunning cached compiler 4de41fb5, interfacing (CompilerInterface) with Scala compiler version 2.11.7[0m
[0m[[0mdebug[0m] [0mCalling Scala compiler with arguments  (CompilerInterface):[0m
[0m[[0mdebug[0m] [0m	-deprecation[0m
[0m[[0mdebug[0m] [0m	-feature[0m
[0m[[0mdebug[0m] [0m	-bootclasspath[0m
[0m[[0mdebug[0m] [0m	C:\Program Files\Java\jre1.8.0_77\lib\resources.jar;C:\Program Files\Java\jre1.8.0_77\lib\rt.jar;C:\Program Files\Java\jre1.8.0_77\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_77\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_77\lib\jce.jar;C:\Program Files\Java\jre1.8.0_77\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_77\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_77\classes;C:\Users\Soeren\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.11.7.jar[0m
[0m[[0mdebug[0m] [0m	-classpath[0m
[0m[[0mdebug[0m] [0m	C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\target\scala-2.11\test-classes;C:\Code\itu-jve\Source\2 Advanced Programming\Miniproject2\target\scala-2.11\classes;C:\Users\Soeren\.ivy2\cache\org.scalacheck\scalacheck_2.11\jars\scalacheck_2.11-1.12.4.jar;C:\Users\Soeren\.ivy2\cache\org.scala-sbt\test-interface\jars\test-interface-1.0.jar;C:\Users\Soeren\.ivy2\cache\org.scalatest\scalatest_2.11\bundles\scalatest_2.11-2.2.4.jar;C:\Users\Soeren\.ivy2\cache\org.scala-lang\scala-reflect\jars\scala-reflect-2.11.2.jar;C:\Users\Soeren\.ivy2\cache\org.scala-lang.modules\scala-xml_2.11\bundles\scala-xml_2.11-1.0.2.jar[0m
[0m[[0mdebug[0m] [0mScala compilation took 2.324185833 s[0m
[0m[[0mdebug[0m] [0m[naha] New invalidations:[0m
[0m[[0mdebug[0m] [0m[naha] 	Set()[0m
[0m[[0mdebug[0m] [0m[naha] Initial set of included nodes: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Previously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0mdebug[0m] [0m[naha] 	Set()[0m
[0m[[0mdebug[0m] [0m[naha] All newly invalidated sources after taking into account (previously) recompiled sources:Set()[0m
