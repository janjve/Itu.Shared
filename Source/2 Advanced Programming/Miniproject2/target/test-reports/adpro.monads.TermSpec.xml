<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="jan-stationary" name="adpro.monads.TermSpec" tests="29" errors="0" failures="1" time="0.451">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="C:\Program Files\Java\jre1.8.0_77\bin"/><property name="java.vm.version" value="25.77-b03"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=";"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="US"/><property name="user.script" value=""/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value=""/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="D:\Development\itu\Source\2 Advanced Programming\Miniproject2"/><property name="java.runtime.version" value="1.8.0_77-b03"/><property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/><property name="java.endorsed.dirs" value="C:\Program Files\Java\jre1.8.0_77\lib\endorsed"/><property name="os.arch" value="amd64"/><property name="java.io.tmpdir" value="C:\Users\rrjan\AppData\Local\Temp\"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="user.variant" value=""/><property name="os.name" value="Windows 10"/><property name="sun.jnu.encoding" value="Cp1252"/><property name="java.library.path" value="C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Users\rrjan\.dnx\bin;C:\Program Files\Microsoft DNX\Dnvm\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Program Files (x86)\Skype\Phone\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Java\jre7\bin;C:\Users\rrjan\AppData\Local\Programs\Git\cmd;C:\Program Files (x86)\scala\bin;C:\Program Files (x86)\sbt\\bin;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Users\rrjan\AppData\Roaming\Dashlane\3.5.2.91147\bin\Firefox_Extension\{442718d9-475e-452a-b3e1-fb1ee16b8e9f}\components;C:\Program Files (x86)\Microsoft VS Code\bin;C:\Users\rrjan\AppData\Roaming\npm;C:\Users\rrjan\AppData\Local\atom\bin;C:\texlive\2015\bin\win32;C:\Program Files (x86)\sbt\bin;C:\Program Files (x86)\Nmap;."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="10.0"/><property name="user.home" value="C:\Users\rrjan"/><property name="user.timezone" value="Europe/Paris"/><property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/><property name="file.encoding" value="Cp1252"/><property name="java.specification.version" value="1.8"/><property name="sbt.log.format" value="true"/><property name="java.class.path" value="C:\Program Files (x86)\sbt\bin\sbt-launch.jar"/><property name="user.name" value="rrjan"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="xsbt.boot.Boot test"/><property name="java.home" value="C:\Program Files\Java\jre1.8.0_77"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.awt.windows.WToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_77"/><property name="java.ext.dirs" value="C:\Program Files\Java\jre1.8.0_77\lib\ext;C:\WINDOWS\Sun\Java\lib\ext"/><property name="sun.boot.class.path" value="C:\Program Files\Java\jre1.8.0_77\lib\resources.jar;C:\Program Files\Java\jre1.8.0_77\lib\rt.jar;C:\Program Files\Java\jre1.8.0_77\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_77\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_77\lib\jce.jar;C:\Program Files\Java\jre1.8.0_77\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_77\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_77\classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="sun.stderr.encoding" value="cp437"/><property name="file.separator" value="\"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="sun.cpu.endian" value="little"/><property name="sun.stdout.encoding" value="cp437"/><property name="sun.desktop" value="windows"/><property name="sun.cpu.isalist" value="amd64"/>
    </properties>
                     <testcase classname="adpro.monads.TermSpec" name="Basic eval should answer 42 to a division [Wadler]" time="0.098">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic eval should return 42 from a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic eval should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic eval should crash on unsafe terms" time="0.11">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception eval should answer Return(42) to our division [Wadler]" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception eval should answer Return(42) to a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception eval should return an exception value for a division by zero" time="0.002">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State eval should should count two divisions" time="0.022">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State eval should should count no divisions" time="0.008">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State eval should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output eval (answer) should give good 'result' and string output" time="0.002">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output eval (answer) should return simple result for a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output eval (answer) should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should be 42 [Wadler]" time="0.004">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should return 42 for a constant" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should throw an exception" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should crash on unsafe terms" time="0.037">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic evalutors should behave identically" time="0.025">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic exception eval should be Return(42) [Wadler]" time="0.005">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic exception eval should return an exception on division by zero" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception evalutors should behave identically (safe)" time="0.028">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception evalutors should behave identically (unsafe)" time="0.024">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic state eval should should count two divisions" time="0.012">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic state eval should should count no divisions" time="0.005">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic state eval should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State evaluators should behave identically (safe)" time="0.035">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic output eval should give good result and string output" time="0.027">
                                                 <failure message="&quot;eval([]Div(Div(Cons(1972),C...&quot; was not equal to &quot;eval([Cons(1972)) &lt;= 1972
eval(Cons(2)) &lt;= 2
eval(Div(Cons(1972),Cons(2))) &lt;= 986
eval(Cons(23)) &lt;= 23
eval(]Div(Div(Cons(1972),C...&quot;" type="org.scalatest.exceptions.TestFailedException">org.scalatest.exceptions.TestFailedException: &quot;eval([]Div(Div(Cons(1972),C...&quot; was not equal to &quot;eval([Cons(1972)) &lt;= 1972
eval(Cons(2)) &lt;= 2
eval(Div(Cons(1972),Cons(2))) &lt;= 986
eval(Cons(23)) &lt;= 23
eval(]Div(Div(Cons(1972),C...&quot;
	at org.scalatest.MatchersHelper$.newTestFailedException(MatchersHelper.scala:160)
	at org.scalatest.Matchers$AnyShouldWrapper.shouldBe(Matchers.scala:6408)
	at adpro.monads.TermSpec$$anonfun$27.apply$mcV$sp(TermSpec.scala:218)
	at adpro.monads.TermSpec$$anonfun$27.apply(TermSpec.scala:213)
	at adpro.monads.TermSpec$$anonfun$27.apply(TermSpec.scala:213)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1647)
	at org.scalatest.Suite$class.withFixture(Suite.scala:1122)
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1683)
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1644)
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1656)
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1656)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1656)
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1683)
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1714)
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1714)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1714)
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1683)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1683)
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1760)
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1760)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1760)
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1683)
	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:466)
	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:677)
	at sbt.TestRunner.runTest$1(TestFramework.scala:76)
	at sbt.TestRunner.run(TestFramework.scala:85)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1$$anonfun$apply$8.apply(TestFramework.scala:202)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1$$anonfun$apply$8.apply(TestFramework.scala:202)
	at sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:185)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1.apply(TestFramework.scala:202)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1.apply(TestFramework.scala:202)
	at sbt.TestFunction.apply(TestFramework.scala:207)
	at sbt.Tests$$anonfun$9.apply(Tests.scala:216)
	at sbt.Tests$$anonfun$9.apply(Tests.scala:216)
	at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:44)
	at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:44)
	at sbt.std.Transform$$anon$4.work(System.scala:63)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:228)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:228)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:17)
	at sbt.Execute.work(Execute.scala:237)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:228)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:228)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:159)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:28)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
</failure>
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic output eval should return simple result for a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic output eval should throw a scala exception on division by 0" time="0.0">
                                                 
                                               </testcase>
                     <system-out></system-out>
                     <system-err></system-err>
                   </testsuite>